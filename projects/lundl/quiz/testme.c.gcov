        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2: * Author: Laura Lund, lundl@oregonstate.edu
        -:    3: * Assignment: CS 362 Winter 2019, Random Tester Quiz
        -:    4: * Description: This file contains a function testme() that is tested via the
        -:    5: * 		random tester functions inputChar() and inputString().
        -:    6: * ***************************************************************************/
        -:    7:#include<stdio.h>
        -:    8:#include<string.h>
        -:    9:#include<stdlib.h>
        -:   10:#include<time.h>
        -:   11:
function inputChar called 721 returned 100% blocks executed 100%
      721:   12:char inputChar()
        -:   13:{
        -:   14:    // TODO: rewrite this function
      721:   15:	int randIndex = rand();
call    0 returned 100%
        -:   16:	
        -:   17:	// Create a pool of valid characters + a few invalid characters
        -:   18:	char static characterPool[] = {'[', '(', '{', ' ', 'a', 'x', '}', ')', ']', 
        -:   19:		'a', 'r', 'e', 's', 't'};
        -:   20:	
        -:   21:	// Randomly select a character from the valid pool by modding the random number
      721:   22:	randIndex = randIndex % 14;	// random index
        -:   23:	
        -:   24:	// Return the character at this random index
      721:   25:    return characterPool[randIndex];
        -:   26:}
        -:   27:
function inputString called 181 returned 100% blocks executed 100%
      181:   28:char *inputString()
        -:   29:{
        -:   30:    // TODO: rewrite this function
        -:   31:	int i;
        -:   32:	
        -:   33:	// Randomly choose whether or not to return "reset\0" or a new string
      181:   34:	int randomChoice = rand();
call    0 returned 100%
      181:   35:	randomChoice = randomChoice % 2; // 50% chance of either string
        -:   36:
        -:   37:	// if randomChoice == 0
      181:   38:	if(randomChoice == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   39:	{
        -:   40:		// return "reset"
        -:   41:		char static resetString[] = {'r', 'e', 's', 'e', 't', '\0'};
       91:   42:		return resetString;
        -:   43:	}
        -:   44:	// Otherwise
        -:   45:	// Build strings of length 6 using random characters.
        -:   46:	char static returnString[6];
        -:   47:    // Return the random string
      630:   48:	for(i = 0; i < sizeof(returnString); i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   49:	{
        -:   50:		// call inputChar to get another character
      540:   51:		returnString[i] = inputChar();
call    0 returned 100%
        -:   52:	}
        -:   53:	// return new string
       90:   54:    return returnString;
        -:   55:}
        -:   56:
function testme called 1 returned 0% blocks executed 100%
        1:   57:void testme()
        -:   58:{
        1:   59:  int tcCount = 0;
        -:   60:  char *s;
        -:   61:  char c;
        1:   62:  int state = 0;
        -:   63:  while (1)
        -:   64:  {
      181:   65:    tcCount++;
      181:   66:    c = inputChar();
call    0 returned 100%
      181:   67:    s = inputString();
call    0 returned 100%
      181:   68:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   69:
      181:   70:    if (c == '[' && state == 0) state = 1;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      181:   71:    if (c == '(' && state == 1) state = 2;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
      181:   72:    if (c == '{' && state == 2) state = 3;
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      181:   73:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
      181:   74:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      181:   75:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
      181:   76:    if (c == '}' && state == 6) state = 7;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      181:   77:    if (c == ')' && state == 7) state = 8;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      181:   78:    if (c == ']' && state == 8) state = 9;
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
      181:   79:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
       91:   80:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       91:   81:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       91:   82:       && state == 9)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   83:    {
        1:   84:      printf("error \n");
call    0 returned 100%
        1:   85:      exit(200);
call    0 returned 0%
        -:   86:    }
      180:   87:  }
        -:   88:}
        -:   89:
        -:   90:
function main called 1 returned 0% blocks executed 80%
        1:   91:int main(int argc, char *argv[])
        -:   92:{
        1:   93:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   94:    testme();
call    0 returned 0%
    #####:   95:    return 0;
        -:   96:}
